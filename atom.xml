<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://YaoyaoTsui.github.io</id>
    <title>Tsui</title>
    <updated>2021-04-12T07:19:56.031Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://YaoyaoTsui.github.io"/>
    <link rel="self" href="https://YaoyaoTsui.github.io/atom.xml"/>
    <subtitle>不要假装努力，结果不会陪你演戏！</subtitle>
    <logo>https://YaoyaoTsui.github.io/images/avatar.png</logo>
    <icon>https://YaoyaoTsui.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Tsui</rights>
    <entry>
        <title type="html"><![CDATA[deepin下安装zsh]]></title>
        <id>https://YaoyaoTsui.github.io/post/deepin_zsh_install/</id>
        <link href="https://YaoyaoTsui.github.io/post/deepin_zsh_install/">
        </link>
        <updated>2021-04-12T07:07:58.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>参考文档：</p>
<ol>
<li>csdn Linux下安装zsh： https://blog.csdn.net/gatieme/article/details/52741221#t7</li>
<li>zsh官方地址：https://www.zsh.org/</li>
<li>github oh-my-zsh项目： https://github.com/ohmyzsh/ohmyzsh</li>
<li>github oh-my-zsh主题介绍： https://github.com/ohmyzsh/ohmyzsh/wiki/themes</li>
<li>github oh-my-zsh插件介绍：https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins</li>
<li>github oh-my-zsh补充字体安装与配置： https://github.com/powerline/fonts</li>
<li>zsh显示执行时间：https://note.pcwu.net/2017/03/25/zsh-theme-execution-time/</li>
</ol>
</blockquote>
<p>大多数的Linux用户偏爱Bash，因为发行版通常默认的就是它。<br>
Bash确实是不错的Shell，但仍有用很多不尽人意的地方，如自动补全的功能不够强大，定位较长路径不够方便，命令历史管理不够完善等。</p>
<p>介绍使用zsh，功能十分强大..推荐给大家！</p>
<h1 id="1-zsh介绍">1. zsh介绍</h1>
<h2 id="11-linux-shell">1.1 Linux shell</h2>
<p>Linux/Unix提供了很多种Shell，为毛要这么多Shell？</p>
<p>难道用来炒着吃么？那我问你，你同类型的衣服怎么有那么多件？花色，质地还不一样。写程序比买衣服复杂多了，而且程序员往往负责把复杂的事情搞简单，简单的事情搞复杂。牛程序员看到不爽的Shell，就会自己重新写一套，慢慢形成了一些标准，常用的Shell有这么几种，sh、bash、csh等，想知道你的系统有几种shell，可以通过以下命令查看：</p>
<pre><code class="language-shell">tsui@tsui-PC:~$ cat /etc/shells
# /etc/shells: valid login shells
/bin/sh
/bin/bash
/usr/bin/bash
/bin/rbash
/usr/bin/rbash
/bin/dash
/usr/bin/dash
/bin/zsh
/usr/bin/zsh
</code></pre>
<h2 id="12-zsh介绍">1.2 zsh介绍</h2>
<p>Zsh是一个Linux下强大的shell, 由于大多数Linux产品安装，以及默认使用bash shell, 但是丝毫不影响极客们对zsh的热衷, 几乎每一款Linux产品都包含有zsh，通常可以用apt-get、urpmi或yum等包管理器进行安装</p>
<p>Zsh具有以下主要功能</p>
<ul>
<li>
<p>开箱即用、可编程的命令行补全功能可以帮助用户输入各种参数以及选项</p>
</li>
<li>
<p>在用户启动的所有shell中共享命令历史</p>
</li>
<li>
<p>通过扩展的文件通配符，可以不利用外部命令达到find命令一般展开文件名</p>
</li>
<li>
<p>改进的变量与数组处理</p>
</li>
<li>
<p>在缓冲区中编辑多行命令</p>
</li>
<li>
<p>多种兼容模式，例如使用/bin/sh运行时可以伪装成Bourne shell</p>
</li>
<li>
<p>可以定制呈现形式的提示符；包括在屏幕右端显示信息，并在键入长命令时自动隐藏</p>
</li>
<li>
<p>可加载的模块，提供其他各种支持：完整的TCP与Unix域套接字控制，FTP客户端与扩充过的数学函数</p>
</li>
<li>
<p>完全可定制化</p>
</li>
</ul>
<h2 id="13-zsh与oh-my-zsh终极配置">1.3 zsh与oh-my-zsh终极配置</h2>
<p>“工欲善其事，必先利其器”</p>
<p>选择oh-my-zsh, oh-my-zsh是基于zsh的功能做了一个扩展，方便的插件管理、主题自定义，以及漂亮的自动完成效果。</p>
<p>在Github上找关于zsh的项目时发现的，试用了一下觉得很方便，不用像上面文章里面提到的那么复杂，配置一些插件的名称即可使用相应的功能。</p>
<pre><code>官网：https://github.com/robbyrussell/oh-my-zsh

评价：https://github.com/robbyrussell/oh-my-zsh/wiki/Testimonials
</code></pre>
<h1 id="2-安装zsh">2. 安装zsh</h1>
<h2 id="21-安装zsh">2.1 安装zsh</h2>
<blockquote>
<p>如果想配置oh-my-zsh，需要先安装zsh</p>
</blockquote>
<p>对于一般的Ubuntu系统，配置好正确的源之后，就能直接键入以下命令安装：</p>
<pre><code class="language-shell">sudo apt-get install zsh
</code></pre>
<h2 id="22-配置zsh">2.2 配置zsh</h2>
<p>zsh的配置是一门大学问，可以去网上找一些别人配置好的配置文件拿过来使用！</p>
<p>把.zshrc拷贝到相应用户的home目录即可<br>
(也可以把你的bash的配置文件(<code>~/.bash_prorile</code>或者<code>~/.profile</code>等)给拷贝到zsh的配置文件<code>~/.zshrc</code>里，因为zsh兼容bash)</p>
<h2 id="23-取代bash将zsh设置为默认shell">2.3 取代bash，将zsh设置为默认shell</h2>
<pre><code class="language-shell">sudo usermod -s /bin/zsh username
或者
chsh -s /bin/zsh
如果切换回bash使用：
chsh -s /bin/bash
</code></pre>
<p>当然你实在不愿意把zsh当成默认的shell, 而又想使用它, 那么你可以每次进入是都使用<code>zsh</code>进入, 而输入<code>exit</code>退出</p>
<h2 id="24-安装oh-my-zsh">2.4 安装oh-my-zsh</h2>
<p>直接用zsh会很蛋疼，因为zsh功能很强大但是太复杂，所以需要oh-my-zsh来将它简单化</p>
<ol>
<li>直接用git从github上面下载包</li>
</ol>
<pre><code>git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh
</code></pre>
<ol start="2">
<li>备份已有的zshrc, 替换zshrc</li>
</ol>
<pre><code class="language-shell">cp ~/.zshrc ~/.zshrc.bak
cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc
</code></pre>
<ol start="3">
<li>直接使用脚本安装</li>
</ol>
<pre><code class="language-shell">cd ~/.oh-my-zsh/tools
./install.sh
</code></pre>
<blockquote>
<p>需要将克隆下来的文件夹进行一个重命名，防止安装时文件夹名相同进行冲突！</p>
</blockquote>
<h2 id="25-配置oh-my-zsh">2.5 配置oh-my-zsh</h2>
<h3 id="251-配置主题">2.5.1 配置主题</h3>
<p>oh-my-zsh集成了大量的主题, 位于oh-my-zsh/theme</p>
<p>配置主题, 可以通过修改<code>~/.zshrc</code>中的环境变量<code>ZSH_THEME</code>来完成</p>
<pre><code class="language-shell">ZSH_THEME=&quot;agnoster&quot; # (this is one of the fancy ones)
</code></pre>
<p>如果你觉得主题太多你可以选择使用随机模式, 来由系统随机选择</p>
<pre><code class="language-shell">ZSH_THEME=&quot;random&quot; # (...please let it be pie... please be some pie..)
</code></pre>
<h3 id="252-配置插件">2.5.2 配置插件</h3>
<p>修改<code>~/.zshrc</code>中<code>plugins</code></p>
<pre><code class="language-shell">plugins=(git bundler osx rake ruby)
</code></pre>
<blockquote>
<p>详细插件信息，可以参照zsh插件Plugins介绍</p>
</blockquote>
<h3 id="253-字体配置">2.5.3 字体配置</h3>
<p>安装完zsh之后，切换一些主题，会有一些字符不显示，这是因为系统字体库中没有这些符号的支持，所以我们要手动添加配置一些字体库。</p>
<ul>
<li>Powerline fonts 安装</li>
</ul>
<p>如果您正在运行基于Debian或Ubuntu的Linux发行版，则应使用以下命令提供一个软件包来安装Powerline字体：</p>
<pre><code class="language-shell">sudo apt-get install fonts-powerline
</code></pre>
<ul>
<li>字体配置</li>
</ul>
<p>在某些发行版中，默认情况下会忽略Terminess Powerline，并且必须明确允许它们。提供了一个fontconfig文件来启用它。<a href="https://github.com/powerline/fonts/blob/master/fontconfig/50-enable-terminess-powerline.conf">将此文件</a> 从fontconfig目录复制到您的主文件夹下<code>~/.config/fontconfig/conf.d</code> （如果不存在，请创建它）并重新运行<code>fc-cache -vf</code>。</p>
<h3 id="254-配置执行时间">2.5.4 配置执行时间</h3>
<p>修改需要修改的主题文件，以agnoster.zsh-theme主题为例：</p>
<p>在文件中添加以下代码：</p>
<pre><code class="language-shell">vim ~/.oh-my-zsh/themes/agnoster.zsh-theme

# 添加配置
function preexec() {
  timer=${timer:-$SECONDS}
}

function precmd() {
  if [ $timer ]; then
    timer_show=$(($SECONDS - $timer))
    if [[ $timer_show -ge $min_show_time ]]; then
      RPROMPT='%{$fg_bold[red]%}(${timer_show}s)%f%{$fg_bold[white]%}[%*]%f'
    else
      RPROMPT='%{$fg_bold[white]%}[%*]%f'
    fi
    unset timer
  fi
}

autoload -Uz add-zsh-hook
add-zsh-hook preexec preexec
add-zsh-hook precmd precmd
</code></pre>
<h2 id="26-更新oh-my-zsh">2.6 更新oh-my-zsh</h2>
<ul>
<li>默认情况下, 您将被提示检查每几周的升级. 如果你想我ZSH自动升级本身没有提示你, 修改<code>~/.zshrc</code></li>
</ul>
<pre><code class="language-shell">disable_update_prompt = true
</code></pre>
<ul>
<li>禁用自动升级, 修改<code>~/.zshrc</code></li>
</ul>
<pre><code class="language-shell">disable_auto_update = true
</code></pre>
<ul>
<li>当然你也可以选择手动更新</li>
</ul>
<p>如果你想在任何时间点升级（也许有人刚刚发布了一个新的插件，你不想等待一个星期？)你只需要运行：</p>
<pre><code class="language-shell">upgrade_oh_my_zsh
</code></pre>
<h2 id="27-卸载oh-my-zsh">2.7 卸载oh-my-zsh</h2>
<p>如果你想卸载<code>oh-my-zsh</code>, 只需要执行<code>uninstall_oh_my_zsh zsh</code>， 从命令行运行. 这将删除本身和恢复你以前的bash或者zsh配置.</p>
<pre><code class="language-shell">uninstall_oh_my_zsh zsh
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Security Onion两种方式安装]]></title>
        <id>https://YaoyaoTsui.github.io/post/securityonion_install/</id>
        <link href="https://YaoyaoTsui.github.io/post/securityonion_install/">
        </link>
        <updated>2021-04-12T06:49:40.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>基于CentOS 7<br>
下载地址：https://github.com/Security-Onion-Solutions/securityonion/blob/master/VERIFY_ISO.md<br>
安装文档：https://docs.securityonion.net/en/2.3/installation.html#installation-using-security-onion-iso-image<br>
参考文档：https://www.freebuf.com/articles/ics-articles/248260.html</p>
</blockquote>
<h1 id="一-安装环境要求">一、安装环境要求</h1>
<ol>
<li>内存：至少12G</li>
<li>硬盘：200G</li>
<li>CPU：4核</li>
<li>网卡：2块</li>
<li>系统：CentOS 7</li>
</ol>
<h1 id="二-准备安装">二、准备安装</h1>
<h3 id="21-方式一空机iso安装">2.1 方式一：空机ISO安装</h3>
<ol>
<li>下载ISO镜像文件</li>
</ol>
<pre><code class="language-shell">下载地址：https://github.com/Security-Onion-Solutions/securityonion/blob/master/VERIFY_ISO.md
# 选择合适的ISO镜像下载
</code></pre>
<ol start="2">
<li>创建虚拟机</li>
</ol>
<pre><code>1. 新建虚拟机，选择CentOS 7 64-bit；
2. 镜像选择我们下载好的securityonion镜像；
3. 设置参数：内存至少需要12G、磁盘空间约200G、添加一块网卡（总计2块）、CPU内核4；
4. 完成设置，准备开机安装；
</code></pre>
<ol start="3">
<li>开启虚拟机准备安装系统，输入yes，之后创建安全洋葱系统账号，我这里创建的账号密码为:onion/admin.123</li>
<li>安装完成重启系统后，输入用户名和密码登录系统onion/admin123</li>
<li>弹出security onion安装界面，按照指引进行安装</li>
<li>安装完成后，登录系统配置web登录</li>
</ol>
<pre><code class="language-shell">[root@securityonion ~]# so-allow
This program allows you to add a firewall rule to allow connections from a new IP address.

Choose the role for the IP or Range you would like to add

[a] - Analyst - ports 80/tcp and 443/tcp
[b] - Logstash Beat - port 5044/tcp
[e] - Elasticsearch REST API - port 9200/tcp
[f] - Strelka frontend - port 57314/tcp
[o] - Osquery endpoint - port 8090/tcp
[s] - Syslog device - 514/tcp/udp
[w] - Wazuh agent - port 1514/tcp/udp
[p] - Wazuh API - port 55000/tcp
[r] - Wazuh registration service - 1515/tcp

Please enter your selection:
a
Enter a single ip address or range to allow (example: 10.10.10.10 or 10.10.0.0/16):
192.168.135.128/24
</code></pre>
<blockquote>
<p>这个时候就可以使用该地址进行登录web端管理了</p>
</blockquote>
<h2 id="22-方式二基于系统在线安装">2.2 方式二：基于系统在线安装</h2>
<blockquote>
<p>Installation on Ubuntu or CentOS</p>
</blockquote>
<ol>
<li>下载安装git</li>
</ol>
<pre><code class="language-shell">sudo yum -y install git
# Once you have git, then do the following:
</code></pre>
<ol start="2">
<li>克隆security onion</li>
</ol>
<pre><code class="language-shell">git clone https://github.com/Security-Onion-Solutions/securityonion
cd securityonion
</code></pre>
<ol start="3">
<li>执行安装</li>
</ol>
<pre><code>sudo bash so-setup-network
</code></pre>
<blockquote>
<p>界面操作与ISO安装雷同</p>
</blockquote>
<h3 id="221-问题">2.2.1 问题：</h3>
<ol>
<li>由于是使用的在线安装的方式，所以前提就是保证自己的系统可以访问网络，且域名解析系统正常使用！</li>
</ol>
<pre><code class="language-shell"># 有可能会出现ping的通ip却ping不通域名的情况下，有可能是因为安装GNOME的时候安装了GNOME网络管理，接管了网络设置。
# 明显标志：检查/etc/resolv.conf文件，发现# Generated by NetworkManager
# 问题解决：

vim /etc/resolv.conf 将# Generated by NetworkManager栏下的信息注释掉
vim /etc/sysconfig/network-scripts/ifcfg-eth0 # 编辑网卡信息，添加DNS配置,可根据实际情况修改
DNS1=114.114.114.114
DNS2=8.8.8.8

systemctl stop NetworkManager  # 关闭GNOME网络管理
systemctl restart network # 重启网络使配置生效

ping baidu.com # 这个时候就可以正常ping通啦！
</code></pre>
<ol start="2">
<li>一直卡在26%进度或某一进度（下载某些软件阶段：例如so-acng）</li>
</ol>
<pre><code class="language-shell"># 卡在2% 升级包状态
查看安装日志，大多数是因为访问不到镜像源造成的，解决方式一是查看自己的镜像源是否可以正常使用；二是查看网络和DNS解析问题

# 卡在26% 下载某一安装包问题
同上，可能是网络问题和DNS问题
</code></pre>
<ol start="3">
<li>出现<code>kernel:NMI watchdog: BUG: soft lockup - CPU#2 stuck for 28s类似问题</code></li>
</ol>
<ul>
<li>
<p><strong>内核软死锁（soft lockup）bug原因分析：</strong><br>
Soft lockup名称解释：所谓，soft lockup就是说，这个bug没有让系统彻底死机，但是若干个进程（或者kernel thread）被锁死在了某个状态（一般在内核区域），很多情况下这个是由于内核锁的使用的问题。</p>
<p>Linux内核对于每一个cpu都有一个监控进程，在技术界这个叫做watchdog（看门狗）。通过ps –ef | grep watchdog能够看见，进程名称大概是watchdog/X（数字：cpu逻辑编号1/2/3/4之类的）。这个进程或者线程每一秒钟运行一次，否则会睡眠和待机。这个进程运行会收集每一个cpu运行时使用数据的时间并且存放到属于每个cpu自己的内核数据结构。在内核中有很多特定的中断函数。这些中断函数会调用soft lockup计数，他会使用当前的时间戳与特定（对应的）cpu的内核数据结构中保存的时间对比，如果发现当前的时间戳比对应cpu保存的时间大于设定的阀值，他就假设监测进程或看门狗线程在一个相当可观的时间还没有执。Cpu软锁为什么会产生，是怎么产生的？如果linux内核是经过精心设计安排的CPU调度访问，那么怎么会产生cpu软死锁？那么只能说由于用户开发的或者第三方软件引入，看我们服务器内核panic的原因就是qmgr进程引起。因为每一个无限的循环都会一直有一个cpu的执行流程（qmgr进程示一个后台邮件的消息队列服务进程），并且拥有一定的优先级。Cpu调度器调度一个驱动程序来运行，如果这个驱动程序有问题并且没有被检测到，那么这个驱动程序将会暂用cpu的很长时间。根据前面的描述，看门狗进程会抓住（catch）这一点并且抛出一个软死锁（soft lockup）错误。软死锁会挂起cpu使你的系统不可用。</p>
</li>
<li>
<p><strong>解决办法：</strong></p>
</li>
</ul>
<pre><code class="language-shell">#追加到配置文件中
echo 30 &gt; /proc/sys/kernel/watchdog_thresh 
#查看
[root@git-node1 data]# tail -1 /proc/sys/kernel/watchdog_thresh
30
#临时生效
sysctl -w kernel.watchdog_thresh=30
kernel.watchdog_thresh=30
</code></pre>
<blockquote>
<p>参考：https://www.cnblogs.com/fusheng11711/p/10767190.html<br>
实测：无用！！！</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CentOS 7装Oracle11gR2]]></title>
        <id>https://YaoyaoTsui.github.io/post/centos-7-zhuang-oracle11gr2/</id>
        <link href="https://YaoyaoTsui.github.io/post/centos-7-zhuang-oracle11gr2/">
        </link>
        <updated>2021-04-12T04:41:45.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-环境支持">一、环境支持</h1>
<ol>
<li>
<p>CentOS 7 内存至少2G swap建议3G 磁盘大约40G</p>
</li>
<li>
<p>Oracle安装包：版本11gR2</p>
<p>linux.x64_11gR2_database_1of2.zip linux.x64_11gR2_database_2of2.zip</p>
</li>
</ol>
<h1 id="二-安装环境准备">二、安装环境准备</h1>
<h2 id="21-创建运行racle数据库的系统用户和用户组">2.1 创建运行racle数据库的系统用户和用户组</h2>
<pre><code class="language-shell">[snoopy@localhost ~]$ su root　　#切换到root
Password: 
[root@localhost snoopy]# groupadd oinstall　　#创建用户组oinstall
[root@localhost snoopy]# groupadd dba　　#创建用户组dba
[root@localhost snoopy]# useradd -g oinstall -g dba -m oracle　　#创建oracle用户，并加入到oinstall和dba用户组
[root@localhost snoopy]# passwd oracle　　#设置用户oracle的登陆密码，不设置密码，在CentOS的图形登陆界面没法登陆
Changing password for user oracle.
New password: 　　# 密码
BAD PASSWORD: The password is shorter than 8 characters
Retype new password: 　　# 确认密码
passwd: all authentication tokens updated successfully.
[root@localhost snoopy]# id oracle # 查看新建的oracle用户
uid=1001(oracle) gid=1002(dba) groups=1002(dba)
</code></pre>
<blockquote>
<p>为啥要创建oinstall用户组及dba组？ 参考：http://www.oracle.com/technetwork/cn/articles/hunter-rac11gr2-iscsi-2-092412-zhs.html#13</p>
</blockquote>
<p>理论上单例按照需要3种用户组，实际只建两个oinstall和dba，后面再安装oracle数据库的时候把OSOPER组也设置是dba组。</p>
<pre><code class="language-shell">a.oracle 清单组（一般为oinstall):
 OINSTALL 组的成员被视为 Oracle 软件的“所有者”，拥有对 Oracle 中央清单 (oraInventory) 的写入权限。在一个 Linux 系统上首次安装 Oracle 软件时， OUI 会创建 /etc/oraInst.loc 文件。该文件指定 Oracle 清单组的名称（默认为 oinstall）以及 Oracle 中央清单目录的路径。
b.数据库管理员（OSDBA，一般为 dba）:
 OSDBA 组的成员可通过操作系统身份验证使用 SQL 以 SYSDBA 身份连接到一个 Oracle 实例。该组的成员可执行关键的数据库管理任务，如创建数据库、启动和关
 闭实例。该组的默认名称为dba。SYSDBA 系统权限甚至在数据库未打开时也允许访问数据库实例。对此权限的控制完全超出了数据库本身的范围。不要混淆 SYSDBA 
 系统权限与数据库角色 DBA。DBA 角色不包括 SYSDBA 或 SYSOPER 系统权限。
c.数据库操作员组（OSOPER，一般为 oper）:
 OSOPER 组的成员可通过操作系统身份验证使用 SQL 以 SYSOPER 身份连接到一个 Oracle 实例。这个可选组的成员拥有一组有限的数据库管理权限，如管理和运行备份。
 该组的默认名称为oper。SYSOPER 系统权限甚至在数据库未打开时也允许访问数据库实例。对此权限的控制完全超出了数据库本身的范围。要使用该组，选择 Advanced 安装类型来安装 Oracle 数据库软件。 
</code></pre>
<h2 id="22-创建oracle数据库安装目录">2.2 创建oracle数据库安装目录</h2>
<pre><code class="language-shell">[snoopy@localhost ~]$ su root
Password: 
[root@localhost snoopy]# mkdir -p /data/oracle　　# oracle数据库安装目录
[root@localhost snoopy]# mkdir -p /data/oraInventory　　# oracle数据库配置文件目录
[root@localhost snoopy]# mkdir -p /data/database　　# oracle数据库软件包解压目录
[root@localhost snoopy]# cd /data
[root@localhost data]# ls　　#创建完毕检查一下（强迫症）
database  oracle  oraInventory
[root@localhost data]# chown -R oracle:oinstall /data/oracle　　#设置目录所有者为oinstall用户组的oracle用户
[root@localhost data]# chown -R oracle:oinstall /data/oraInventory
[root@localhost data]# chown -R oracle:oinstall /data/database
</code></pre>
<h2 id="23-修改os系统标识">2.3 修改OS系统标识</h2>
<pre><code class="language-shell">[root@localhost ~]# cat /proc/version 
Linux version 3.10.0-1062.el7.x86_64 (mockbuild@kbuilder.bsys.centos.org) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-36) (GCC) ) #1 SMP Wed Aug 7 18:08:02 UTC 2019
[root@localhost data]# cat /etc/redhat-release　　
CentOS Linux release 7.7.1908 (Core) 
[root@localhost data]# vi /etc/redhat-release
[root@localhost data]# cat /etc/redhat-release 
redhat-7 
</code></pre>
<h2 id="24-安装oracle数据库所需要的软件包">2.4 安装Oracle数据库所需要的软件包</h2>
<pre><code class="language-shell">操作系统:Oracle Linux 7 and Red Hat Enterprise Linux 7
The following packages (or later versions) must be installed:
binutils-2.23.52.0.1-12.el7.x86_64 
compat-libcap1-1.10-3.el7.x86_64 
gcc-4.8.2-3.el7.x86_64 
gcc-c++-4.8.2-3.el7.x86_64 
glibc-2.17-36.el7.i686 
glibc-2.17-36.el7.x86_64 
glibc-devel-2.17-36.el7.i686 
glibc-devel-2.17-36.el7.x86_64 
ksh
libaio-0.3.109-9.el7.i686 
libaio-0.3.109-9.el7.x86_64 
libaio-devel-0.3.109-9.el7.i686 
libaio-devel-0.3.109-9.el7.x86_64 
libgcc-4.8.2-3.el7.i686 
libgcc-4.8.2-3.el7.x86_64 
libstdc++-4.8.2-3.el7.i686 
libstdc++-4.8.2-3.el7.x86_64 
libstdc++-devel-4.8.2-3.el7.i686 
libstdc++-devel-4.8.2-3.el7.x86_64 
libXi-1.7.2-1.el7.i686 
libXi-1.7.2-1.el7.x86_64 
libXtst-1.2.2-1.el7.i686 
libXtst-1.2.2-1.el7.x86_64 
make-3.82-19.el7.x86_64 
sysstat-10.1.5-1.el7.x86_64 
</code></pre>
<blockquote>
<ol>
<li>
<p>yum install -y ksh binutils compat-libstdc++-33 elfutils-libelf elfutils-libelf-devel gcc gcc-c++ glibc glibc-common glibc-devel libaio libaio-devel libgcc libstdc++ libstdc++-devel make numactl sysstat libXp unixODBC unixODBC-devel</p>
</li>
<li>
<p>若遇到无法安装pdksh，可以下载对应rpm包进行安装</p>
</li>
<li>
<pre><code class="language-text">rpm -q binutils compat-libstdc++-33 elfutils-libelf elfutils-libelf-devel expat gcc gcc-c++ glibc glibc-common glibc-devel glibc-headers libaio libaio-devel libgcc libstdc++ libstdc++-devel make pdksh sysstat unixODBC unixODBC-devel | grep &quot;not installed&quot;
</code></pre>
</li>
</ol>
</blockquote>
<h2 id="25-关闭防火墙-关闭selinux">2.5 关闭防火墙、关闭selinux</h2>
<pre><code class="language-shell">[root@localhost ~]# systemctl status firewalld.service # 查看防火墙状态
[root@localhost ~]# systemctl stop firewalld.service # 关闭防火墙，防火墙先禁用，搞好之后再配置

[root@localhost /]# vim /etc/selinux/config # 修改selinux配置文件
[root@localhost /]# cat /etc/selinux/config
 
# This file controls the state of SELinux on the system.
# SELINUX= can take one of these three values:
#     enforcing - SELinux security policy is enforced.
#     permissive - SELinux prints warnings instead of enforcing.
#     disabled - No SELinux policy is loaded.
SELINUX=disabled   # 此处修改为disabled
# SELINUXTYPE= can take one of three two values:
#     targeted - Targeted processes are protected,
#     minimum - Modification of targeted policy. Only selected processes are protected. 
#     mls - Multi Level Security protection.
SELINUXTYPE=targeted 

[root@localhost ~]# setenforce 0 # 使配置生效
</code></pre>
<h2 id="26-修改内核参数">2.6 修改内核参数</h2>
<pre><code class="language-shell">[root@localhost /]# vim /etc/sysctl.conf 
[root@localhost /]# cat /etc/sysctl.conf 
# System default settings live in /usr/lib/sysctl.d/00-system.conf.
# To override those settings, enter new settings here, or in an /etc/sysctl.d/&lt;name&gt;.conf file
#
# For more information, see sysctl.conf(5) and sysctl.d(5).
# 添加以下参数：
net.ipv4.icmp_echo_ignore_broadcasts = 1
net.ipv4.conf.all.rp_filter = 1
fs.file-max = 6815744 #设置最大打开文件数
fs.aio-max-nr = 1048576
kernel.shmall = 2097152 #共享内存的总量，8G内存设置：2097152*4k/1024/1024
kernel.shmmax = 2147483648 #最大共享内存的段大小
kernel.shmmni = 4096 #整个系统共享内存端的最大数
kernel.sem = 250 32000 100 128
net.ipv4.ip_local_port_range = 9000 65500 #可使用的IPv4端口范围
net.core.rmem_default = 262144
net.core.rmem_max= 4194304
net.core.wmem_default= 262144
net.core.wmem_max= 1048576
使配置参数生效
[root@localhost /]# sysctl -p
</code></pre>
<h2 id="27-对oracle用户设置限制提高软件运行性能">2.7 对oracle用户设置限制，提高软件运行性能</h2>
<pre><code class="language-shell">[root@localhost /]# vim /etc/security/limits.conf 

# 添加以下配置：
oracle soft nproc 2047
oracle hard nproc 16384
oracle soft nofile 1024
oracle hard nofile 65536  
</code></pre>
<h2 id="28-配置用户的环境变量">2.8 配置用户的环境变量</h2>
<pre><code class="language-shell">[root@localhost /]# vim /home/oracle/.bash_profile 
# 添加以下配置： 
export ORACLE_BASE=/data/oracle #oracle数据库安装目录
export ORACLE_HOME=$ORACLE_BASE/product/11.2.0/db_1 #oracle数据库路径
export ORACLE_SID=orcl #oracle启动数据库实例名
export ORACLE_TERM=xterm #xterm窗口模式安装
export PATH=$ORACLE_HOME/bin:/usr/sbin:$PATH #添加系统环境变量
export LD_LIBRARY_PATH=$ORACLE_HOME/lib:/lib:/usr/lib #添加系统环境变量
export LANG=C #防止安装过程出现乱码
export NLS_LANG=AMERICAN_AMERICA.ZHS16GBK  #设置Oracle客户端字符集，必须与Oracle安装时设置的字符集保持一致，如：ZHS16GBK，否则出现数据导入导出中文乱码问题


# 使上述配置生效
[root@localhost /]# source /home/oracle/.bash_profile 
</code></pre>
<h2 id="29-解压安装包">2.9 解压安装包</h2>
<pre><code class="language-shell">[oracle@localhost /]$ cd /usr/local/src　　#进入/usr/local/src目录
[oracle@localhost src]$ ls	# 提前准备好的安装包文件
linux.x64_11gR2_database_1of2.zip  linux.x64_11gR2_database_2of2.zip
[oracle@localhost src]$ unzip linux.x64_11gR2_database_1of2.zip -d /data/database/　　#解压
(省略...)
[oracle@localhost src]$ unzip linux.x64_11gR2_database_2of2.zip -d /data/database/　　#解压
(省略...)
[oracle@localhost src]$ su root
Password: 
[root@localhost src]# chown -R oracle:oinstall /data/database/database/
</code></pre>
<h1 id="三-安装oracle图形化界面安装">三、安装Oracle（图形化界面安装）</h1>
<h2 id="31-图形界面登陆oracle用户">3.1 图形界面登陆oracle用户：</h2>
<h2 id="32-启动oralce安装">3.2 启动oralce安装</h2>
<pre><code class="language-shell">[oracle@localhost ~]$ cd /data/database/database/
[oracle@localhost ~]$ ./runInstaller
</code></pre>
<blockquote>
<p>会弹出Oracle的安装图形化界面</p>
</blockquote>
<p>安装时遇到问题：</p>
<ol>
<li>swap空间不够问题</li>
</ol>
<blockquote>
<p>要求大约在2.67G，实际上只有2G</p>
</blockquote>
<pre><code class="language-shell">[root@localhost ~]# free -m # 查看当前情况
[root@localhost ~]# dd if=/dev/zero of=/home/swap bs=1024 count=1024000 # 由2048M扩展到3048M
[root@localhost ~]# swapon /home/swap
</code></pre>
<ol start="2">
<li>检查package</li>
</ol>
<p>之前没有安装的，此时安装，多检查几次</p>
<p>3.3 配置监听</p>
<pre><code class="language-shell">[oracle@localhost ~]$ netca 

Oracle Net Services Configuration:
Configuring Listener:LISTENER
Listener configuration complete.
Oracle Net Listener Startup:
    Running Listener Control: 
      /data/oracle/product/11.2.0/db_1/bin/lsnrctl start LISTENER
    Listener Control complete.
    Listener started successfully.
Oracle Net Services configuration successful. The exit code is 0
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ CentOS 7 重启某个服务报错]]></title>
        <id>https://YaoyaoTsui.github.io/post/centos7重启某服务失败/</id>
        <link href="https://YaoyaoTsui.github.io/post/centos7重启某服务失败/">
        </link>
        <updated>2021-04-10T16:06:03.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>错误信息：<br>
Authorization not available. Check if polkit service is running or see debug message for more information.<br>
参考链接：<br>
https://www.icode9.com/content-3-715773.html<br>
https://access.redhat.com/solutions/1543343</p>
</blockquote>
<p>解决方案：</p>
<ol>
<li>根据提示查看polkit状态</li>
</ol>
<pre><code>systemctl status polkit
</code></pre>
<blockquote>
<p>如果发现polkit的状态是faild，检查系统已安装polkit并手动启动它</p>
</blockquote>
<ol start="2">
<li>检查是否安装了polkit</li>
</ol>
<pre><code class="language-shell">yum list installed | grep polkit
</code></pre>
<ol start="3">
<li>安装 polkit</li>
</ol>
<pre><code class="language-shell">yum install polkit
</code></pre>
<ol start="4">
<li>启动polkit</li>
</ol>
<pre><code class="language-shell">systemctl start polkit
</code></pre>
<blockquote>
<p>手动启动仍然是此错误，那么执行以下操作！</p>
</blockquote>
<ol start="5">
<li><strong>确保存在<code>polkitd</code>系统用户和组</strong></li>
</ol>
<pre><code class="language-shell"># 将以下2个复合命令复制/粘贴到终端以检查并有条件地创建用户/组
getent group polkitd &gt;/dev/null &amp;&amp; echo -e &quot;\e[1;32mpolkitd group already exists\e[0m&quot; || { groupadd -r polkitd &amp;&amp; echo -e &quot;\e[1;33mAdded missing polkitd group\e[0m&quot; || echo -e &quot;\e[1;31mAdding polkitd group FAILED\e[0m&quot;; }
getent passwd polkitd &gt;/dev/null &amp;&amp; echo -e &quot;\e[1;32mpolkitd user already exists\e[0m&quot; || { useradd -r -g polkitd -d / -s /sbin/nologin -c &quot;User for polkitd&quot; polkitd &amp;&amp; echo -e &quot;\e[1;33mAdded missing polkitd user\e[0m&quot; || echo -e &quot;\e[1;31mAdding polkitd user FAILED\e[0m&quot;; }
</code></pre>
<ol start="6">
<li><strong>重置<code>polkit</code>和<code>polkit-pkla-compat</code>程序包提供的所有文件的权限和用户/组所有权</strong></li>
</ol>
<pre><code class="language-shell"># 将以下命令复制/粘贴到终端，以检查并有条件地重置用户/组权限和所有权

rpm -Va polkit\* &amp;&amp; echo -e &quot;\e[1;32mpolkit* rpm verification passed\e[0m&quot; || { echo -e &quot;\e[1;33mResetting polkit* rpm user/group ownership &amp; perms\e[0m&quot;; rpm --setugids polkit polkit-pkla-compat; rpm --setperms polkit polkit-pkla-compat; }
</code></pre>
<ol start="7">
<li>重启系统</li>
</ol>
<pre><code>reboot
</code></pre>
<p>再次重启服务，OK！</p>
<p>补充：</p>
<blockquote>
<p>polkit是一个应用程序级别的工具集，通过定义和审核权限规则，实现不同优先级进程间的通讯。</p>
<p>控制决策集中在同一的框架之中，决定低优先级进程是否有权访问高优先级进程</p>
<p>polkit在系统层级进行权限控制，提供了一个低优先级进程和高优先级进程进行通信的系统</p>
<p>在使用systemcd 225的时候会有这类错误异常bug，但是到systemd 229的时候修复了。错误原因是当systemd启动了这个服务的时候policykit -1的postions杀掉了polkit的守护进程。在RHEL,CentOS,ubuntu,debain系统上均可以看到相关bug报告反馈。</p>
</blockquote>
]]></content>
    </entry>
</feed>